// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/files/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all files uploaded by the user from Google Cloud Storage",
                "tags": [
                    "files"
                ],
                "summary": "Get all files uploaded by the user",
                "responses": {
                    "200": {
                        "description": "List of files",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/hackathons": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Récupère une liste de tous les hackathons",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hackathons"
                ],
                "summary": "Lire tous les hackathons",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Hackathon"
                            }
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Ajoute un nouveau hackathon à la base de données",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hackathons"
                ],
                "summary": "Créer un hackathon",
                "parameters": [
                    {
                        "description": "Hackathon à créer",
                        "name": "hackathon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HackathonCreate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Hackathon"
                        }
                    }
                }
            }
        },
        "/hackathons/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Récupère un hackathon par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hackathons"
                ],
                "summary": "Lire un hackathon spécifique",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID du Hackathon",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Hackathon"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Met à jour les informations d'un hackathon par son ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hackathons"
                ],
                "summary": "Mettre à jour un hackathon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID du Hackathon",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Informations du Hackathon à mettre à jour",
                        "name": "hackathon",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Hackathon"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Hackathon"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Supprime un hackathon par son ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "hackathons"
                ],
                "summary": "Supprimer un hackathon",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID du Hackathon",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "true si la suppression est réussie",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Uploads a file to Google Cloud Storage",
                "consumes": [
                    "multipart/form-data"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Upload a file",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "File uploaded successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/login": {
            "post": {
                "description": "Logs in a user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Login",
                "parameters": [
                    {
                        "description": "User credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid request",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the current user",
                "responses": {
                    "200": {
                        "description": "Successfully retrieved user",
                        "schema": {
                            "$ref": "#/definitions/models.PublicUser"
                        }
                    },
                    "401": {
                        "description": "Unauthorized: Invalid token",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Update the profile information of the currently authenticated user, including password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update current user's profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First name of the user",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last name of the user",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Email address of the user",
                        "name": "email",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Profile picture file",
                        "name": "profile_picture",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Current password for verification",
                        "name": "old_password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "New password for the user",
                        "name": "new_password",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully updated user profile",
                        "schema": {
                            "$ref": "#/definitions/models.PublicUser"
                        }
                    },
                    "400": {
                        "description": "Bad request if the provided data is incorrect",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the user's old password is incorrect or token is invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found if the user does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error for any server errors",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Delete the currently authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Delete the current user",
                "responses": {
                    "204": {
                        "description": "Successfully deleted user",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the token is invalid",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found if the user does not exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error for any server errors",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/user/register": {
            "post": {
                "description": "Registers a new user",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Register",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Last Name",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First Name",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Profile Picture",
                        "name": "profile_picture",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Email",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Password",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered",
                        "schema": {
                            "$ref": "#/definitions/models.UserRegisterResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "models.Hackathon": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "createdBy": {
                    "$ref": "#/definitions/models.User"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "endDate": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "maxParticipants": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "startDate": {
                    "type": "string"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Team"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.HackathonCreate": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Un événement pour les développeurs"
                },
                "location": {
                    "type": "string",
                    "example": "Paris"
                },
                "maxParticipants": {
                    "type": "integer",
                    "example": 100
                },
                "name": {
                    "type": "string",
                    "example": "Hackathon de Paris"
                }
            }
        },
        "models.PublicUser": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "profile_picture": {
                    "type": "string"
                }
            }
        },
        "models.Registration": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "team": {
                    "description": "Belongs to Team",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Team"
                        }
                    ]
                },
                "teamID": {
                    "description": "Foreign key referencing Team.ID",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "user": {
                    "description": "Belongs to User",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "userID": {
                    "description": "Foreign key referencing User.ID",
                    "type": "integer"
                }
            }
        },
        "models.Team": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "example": "Team 1"
                },
                "registrations": {
                    "description": "Has many Registrations",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Registration"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "users": {
                    "description": "Has many Users",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "first_name",
                "last_name",
                "password",
                "username"
            ],
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "email": {
                    "type": "string",
                    "example": "john.doe@exmple.com"
                },
                "first_name": {
                    "type": "string",
                    "example": "John"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                },
                "profile_picture": {
                    "type": "string"
                },
                "roles": {
                    "description": "0 = user, 2 = organizer, 4 = admin",
                    "type": "integer",
                    "example": 0
                },
                "team": {
                    "description": "Belongs to Team",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.Team"
                        }
                    ]
                },
                "team_id": {
                    "description": "Foreign key referencing Team.ID",
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string",
                    "example": "jdoe"
                }
            }
        },
        "models.UserLogin": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "john.doe@exmple.com"
                },
                "password": {
                    "type": "string",
                    "example": "password"
                }
            }
        },
        "models.UserRegisterResponse": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "description": "Bearer token",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
