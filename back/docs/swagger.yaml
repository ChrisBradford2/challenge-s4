definitions:
  controllers.JSONResponse:
    additionalProperties: true
    type: object
  models.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  models.Evaluation:
    properties:
      author:
        $ref: '#/definitions/models.User'
      comment:
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      note:
        type: integer
      team:
        allOf:
        - $ref: '#/definitions/models.Team'
        description: Belongs to Team
      teamID:
        description: Foreign key referencing Team.ID
        type: integer
      updatedAt:
        type: string
      userID:
        description: Foreign key referencing User.ID, column name as "author_id"
        type: integer
    type: object
  models.File:
    properties:
      contentType:
        description: File content type
        type: string
      createdAt:
        type: string
      deletedAt:
        type: string
      hackathon_id:
        description: Foreign key for Hackathon
        type: integer
      id:
        type: integer
      lastModified:
        description: Last modified date
        type: string
      name:
        description: Filename
        type: string
      size:
        description: File size in bytes
        type: integer
      updatedAt:
        type: string
      url:
        description: URL to download the file from Google Cloud Storage
        type: string
      userId:
        description: User ID
        type: string
    type: object
  models.Hackathon:
    properties:
      address:
        type: string
      created_by_id:
        type: integer
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/models.User'
      deletedAt:
        type: string
      description:
        type: string
      end_date:
        type: string
      hackathon_files:
        items:
          $ref: '#/definitions/models.File'
        type: array
      id:
        type: integer
      is_active:
        type: boolean
      location:
        type: string
      max_participants:
        type: integer
      max_participants_per_team:
        type: integer
      name:
        type: string
      nb_of_teams:
        type: integer
      participations:
        description: Many-to-many relationship with User through Participation
        items:
          $ref: '#/definitions/models.Participation'
        type: array
      start_date:
        type: string
      teams:
        items:
          $ref: '#/definitions/models.Team'
        type: array
      updatedAt:
        type: string
    type: object
  models.HackathonCreate:
    properties:
      address:
        example: Paris
        type: string
      description:
        example: Un événement pour les développeurs
        type: string
      end_date:
        example: "2021-01-02"
        type: string
      location:
        example: Paris
        type: string
      max_participants:
        example: 100
        type: integer
      max_participants_per_team:
        type: integer
      name:
        example: Hackathon de Paris
        type: string
      start_date:
        example: "2021-01-01"
        type: string
    type: object
  models.Participation:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      hackathonID:
        description: Foreign key referencing Hackathon.ID
        type: integer
      id:
        type: integer
      isOrganizer:
        description: Indicates if the user is an organizer of the hackathon
        type: boolean
      team_id:
        type: integer
      updatedAt:
        type: string
      userID:
        description: Foreign key referencing User.ID
        type: integer
    type: object
  models.PublicUser:
    properties:
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      profile_picture:
        type: string
    type: object
  models.Skill:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
      users:
        description: Many-to-many relationship with User
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.Step:
    properties:
      createdAt:
        type: string
      dead_line_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      deletedAt:
        type: string
      hackathon:
        $ref: '#/definitions/models.Hackathon'
      hackathon_id:
        example: 1
        type: integer
      id:
        type: integer
      position:
        example: 1
        type: integer
      status:
        example: done
        type: string
      title:
        example: Step 1
        type: string
      updatedAt:
        type: string
    type: object
  models.StepCreate:
    properties:
      dead_line_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      hackathon_id:
        example: 1
        type: integer
      position:
        example: 1
        type: integer
      title:
        example: Step 1
        type: string
    type: object
  models.StepUpdate:
    properties:
      dead_line_date:
        example: "2025-12-31T23:59:59Z"
        type: string
      status:
        example: done
        type: string
      title:
        example: Step 1
        type: string
    type: object
  models.Submission:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      evaluation:
        $ref: '#/definitions/models.Evaluation'
      evaluation_id:
        type: integer
      git_link:
        type: string
      id:
        type: integer
      status:
        type: string
      step:
        $ref: '#/definitions/models.Step'
      step_id:
        type: integer
      team:
        $ref: '#/definitions/models.Team'
      team_id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.SubmissionCreate:
    properties:
      evaluation:
        $ref: '#/definitions/models.Evaluation'
      evaluation_id:
        type: integer
      git_link:
        type: string
      status:
        type: string
      team:
        $ref: '#/definitions/models.Team'
      team_id:
        type: integer
    type: object
  models.Team:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      evaluation:
        allOf:
        - $ref: '#/definitions/models.Evaluation'
        description: Relation avec Evaluation
      evaluation_id:
        description: Ajout de l'EvaluationID
        type: integer
      hackathon:
        $ref: '#/definitions/models.Hackathon'
      hackathon_id:
        type: integer
      id:
        type: integer
      name:
        example: Team 1
        type: string
      nbOfMembers:
        type: integer
      updatedAt:
        type: string
      users:
        description: Has many Users
        items:
          $ref: '#/definitions/models.User'
        type: array
    required:
    - name
    type: object
  models.User:
    properties:
      created_by_id:
        type: integer
      createdAt:
        type: string
      createdBy:
        $ref: '#/definitions/models.User'
      deletedAt:
        type: string
      email:
        example: john.doe@exmple.com
        type: string
      first_name:
        example: John
        type: string
      id:
        type: integer
      last_name:
        example: Doe
        type: string
      participations:
        description: Many-to-many relationship with Hackathon through Participation
        items:
          $ref: '#/definitions/models.Participation'
        type: array
      password:
        example: password
        type: string
      profile_picture:
        type: string
      roles:
        description: 0 = user, 2 = organizer, 4 = admin
        example: 0
        type: integer
      skills:
        description: Many-to-many relationship with Skill
        items:
          $ref: '#/definitions/models.Skill'
        type: array
      team:
        allOf:
        - $ref: '#/definitions/models.Team'
        description: Belongs to Team
      team_id:
        description: Foreign key referencing Team.ID
        type: integer
      updatedAt:
        type: string
      username:
        example: jdoe
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - username
    type: object
  models.UserLogin:
    properties:
      email:
        example: john.doe@exmple.com
        type: string
      password:
        example: password
        type: string
    required:
    - email
    - password
    type: object
  models.UserRegisterResponse:
    properties:
      email:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /files/me:
    get:
      description: Get all files uploaded by the user from Google Cloud Storage
      responses:
        "200":
          description: List of files
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all files uploaded by the user
      tags:
      - files
  /hackathons:
    get:
      description: Get all Hackathons
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Hackathon'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Get all Hackathons
      tags:
      - Hackathons
    post:
      consumes:
      - application/json
      description: Create a new Hackathon
      parameters:
      - description: Hackathon object
        in: body
        name: hackathon
        required: true
        schema:
          $ref: '#/definitions/models.HackathonCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created Hackathon
          schema:
            $ref: '#/definitions/models.Hackathon'
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new Hackathon
      tags:
      - Hackathons
  /hackathons/{id}:
    delete:
      description: Delete a Hackathon
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted Hackathon
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Delete a Hackathon
      tags:
      - Hackathons
    get:
      description: Get a single Hackathon
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved Hackathon
          schema:
            $ref: '#/definitions/models.Hackathon'
        "404":
          description: Hackathon not found
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a single Hackathon
      tags:
      - Hackathons
    put:
      consumes:
      - application/json
      description: Update a Hackathon
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      - description: Hackathon object
        in: body
        name: hackathon
        required: true
        schema:
          $ref: '#/definitions/models.HackathonCreate'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated Hackathon
          schema:
            $ref: '#/definitions/models.Hackathon'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Hackathon not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a Hackathon
      tags:
      - Hackathons
  /hackathons/{id}/register:
    post:
      description: Register for a Hackathon
      parameters:
      - description: Hackathon ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered for Hackathon
          schema:
            type: boolean
      security:
      - ApiKeyAuth: []
      summary: Register for a Hackathon
      tags:
      - Hackathons
  /hackathons/{id}/teammate/search:
    post:
      description: Recherche un coéquipier pour un hackathon
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PublicUser'
            type: array
      security:
      - ApiKeyAuth: []
      summary: Rechercher un coéquipier
      tags:
      - hackathons
  /hackathons/user:
    get:
      consumes:
      - application/json
      description: Get hackathons created by the user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of hackathons
          schema:
            items:
              $ref: '#/definitions/models.Hackathon'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get hackathons created by the user
      tags:
      - Hackathons
  /steps:
    post:
      consumes:
      - application/json
      description: Create a new step for a hackathon
      parameters:
      - description: Step object
        in: body
        name: step
        required: true
        schema:
          $ref: '#/definitions/models.StepCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Step created successfully
          schema:
            allOf:
            - $ref: '#/definitions/controllers.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Step'
                message:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new step
      tags:
      - steps
  /steps/{id}:
    put:
      consumes:
      - application/json
      description: Update a step by ID
      parameters:
      - description: Step ID
        in: path
        name: id
        required: true
        type: integer
      - description: Step object
        in: body
        name: step
        required: true
        schema:
          $ref: '#/definitions/models.StepUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Step updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/controllers.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Step'
                message:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Step not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a step
      tags:
      - steps
  /submissions:
    post:
      consumes:
      - application/json
      description: Create a new submission for a step
      parameters:
      - description: Submission object to create
        in: body
        name: submission
        required: true
        schema:
          $ref: '#/definitions/models.SubmissionCreate'
      produces:
      - application/json
      responses:
        "201":
          description: Submission created successfully
          schema:
            allOf:
            - $ref: '#/definitions/controllers.JSONResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.Submission'
                message:
                  type: string
              type: object
        "400":
          description: Bad request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new submission
      tags:
      - submissions
  /submissions/upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file to Google Cloud Storage for a submission
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      responses:
        "201":
          description: File uploaded successfully
          schema:
            allOf:
            - $ref: '#/definitions/controllers.JSONResponse'
            - properties:
                message:
                  type: string
                url:
                  type: string
              type: object
        "400":
          description: Invalid request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Upload a file for a submission
      tags:
      - submissions
  /teams:
    get:
      description: Get all teams
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved teams
          schema:
            items:
              $ref: '#/definitions/models.Team'
            type: array
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get all teams
      tags:
      - teams
    post:
      consumes:
      - application/json
      description: Create a new team
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved team
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Create a new team
      tags:
      - teams
  /teams/{id}:
    delete:
      description: Delete a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted team
        "404":
          description: Team not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete a team
      tags:
      - teams
    get:
      description: Get a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved team
          schema:
            $ref: '#/definitions/models.Team'
        "404":
          description: Team not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get a team
      tags:
      - teams
    patch:
      consumes:
      - application/json
      description: Update a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      - description: Team object
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.Team'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated team
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: Team not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update a team
      tags:
      - teams
  /teams/{id}/leave:
    post:
      description: Leave a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully left team
          schema:
            type: string
        "400":
          description: User is not in the target team
          schema:
            type: string
        "401":
          description: 'Unauthorized: No authorization token provided or invalid token'
          schema:
            type: string
        "404":
          description: Team not found or User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Leave a team
      tags:
      - teams
  /teams/{id}/register:
    post:
      description: Register to a team by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered to team
          schema:
            $ref: '#/definitions/models.Team'
        "400":
          description: User is already in a team or Team is already full
          schema:
            type: string
        "401":
          description: 'Unauthorized: No authorization token provided or invalid token'
          schema:
            type: string
        "404":
          description: Team not found or User not found
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register to a team
      tags:
      - teams
  /upload:
    post:
      consumes:
      - multipart/form-data
      description: Uploads a file to Google Cloud Storage
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: File uploaded successfully
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Upload a file
      tags:
      - files
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user
      parameters:
      - description: User credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            type: string
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "401":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Login
      tags:
      - auth
  /user/me:
    delete:
      consumes:
      - application/json
      description: Delete the currently authenticated user
      produces:
      - application/json
      responses:
        "204":
          description: Successfully deleted user
          schema:
            type: string
        "401":
          description: Unauthorized if the token is invalid
          schema:
            type: string
        "404":
          description: Not Found if the user does not exist
          schema:
            type: string
        "500":
          description: Internal Server Error for any server errors
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Delete the current user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get the current user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved user
          schema:
            $ref: '#/definitions/models.PublicUser'
        "401":
          description: 'Unauthorized: Invalid token'
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Get the current user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update the profile information of the currently authenticated user,
        including password.
      parameters:
      - description: First name of the user
        in: formData
        name: first_name
        type: string
      - description: Last name of the user
        in: formData
        name: last_name
        type: string
      - description: Email address of the user
        in: formData
        name: email
        type: string
      - description: Profile picture file
        in: formData
        name: profile_picture
        type: file
      - description: Current password for verification
        in: formData
        name: old_password
        required: true
        type: string
      - description: New password for the user
        in: formData
        name: new_password
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated user profile
          schema:
            $ref: '#/definitions/models.PublicUser'
        "400":
          description: Bad request if the provided data is incorrect
          schema:
            type: string
        "401":
          description: Unauthorized if the user's old password is incorrect or token
            is invalid
          schema:
            type: string
        "404":
          description: Not Found if the user does not exist
          schema:
            type: string
        "500":
          description: Internal Server Error for any server errors
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Update current user's profile
      tags:
      - users
  /user/register:
    post:
      consumes:
      - multipart/form-data
      description: Registers a new user
      parameters:
      - description: Username
        in: formData
        name: username
        required: true
        type: string
      - description: Last Name
        in: formData
        name: last_name
        required: true
        type: string
      - description: First Name
        in: formData
        name: first_name
        required: true
        type: string
      - description: Profile Picture
        in: formData
        name: profile_picture
        required: true
        type: file
      - description: Email
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: User registered
          schema:
            $ref: '#/definitions/models.UserRegisterResponse'
        "400":
          description: Invalid request
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Register
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    description: Bearer token
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
